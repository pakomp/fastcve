<?php
/**
 * SearchApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Msn\Apis\FastCVE
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastCVE
 *
 * fast, rich and API-based search for CVE and more (CPE, CWE, CAPEC)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Msn\Apis\FastCVE\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Msn\Apis\FastCVE\ApiException;
use Msn\Apis\FastCVE\Configuration;
use Msn\Apis\FastCVE\HeaderSelector;
use Msn\Apis\FastCVE\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  Msn\Apis\FastCVE
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchCAPECApiSearchCapecGet' => [
            'application/json',
        ],
        'searchCPEApiSearchCpeGet' => [
            'application/json',
        ],
        'searchCVEApiSearchCveGet' => [
            'application/json',
        ],
        'searchCWEApiSearchCweGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchCAPECApiSearchCapecGet
     *
     * Search Capec
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $capec Related CAPEC IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCAPECApiSearchCapecGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\FastCVE\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Msn\Apis\FastCVE\Model\HTTPValidationError
     */
    public function searchCAPECApiSearchCapecGet($page_idx = 0, $page_size = 10, $keyword = null, $capec = null, string $contentType = self::contentTypes['searchCAPECApiSearchCapecGet'][0])
    {
        list($response) = $this->searchCAPECApiSearchCapecGetWithHttpInfo($page_idx, $page_size, $keyword, $capec, $contentType);
        return $response;
    }

    /**
     * Operation searchCAPECApiSearchCapecGetWithHttpInfo
     *
     * Search Capec
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $capec Related CAPEC IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCAPECApiSearchCapecGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\FastCVE\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Msn\Apis\FastCVE\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCAPECApiSearchCapecGetWithHttpInfo($page_idx = 0, $page_size = 10, $keyword = null, $capec = null, string $contentType = self::contentTypes['searchCAPECApiSearchCapecGet'][0])
    {
        $request = $this->searchCAPECApiSearchCapecGetRequest($page_idx, $page_size, $keyword, $capec, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Msn\Apis\FastCVE\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Msn\Apis\FastCVE\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Msn\Apis\FastCVE\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Msn\Apis\FastCVE\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCAPECApiSearchCapecGetAsync
     *
     * Search Capec
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $capec Related CAPEC IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCAPECApiSearchCapecGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCAPECApiSearchCapecGetAsync($page_idx = 0, $page_size = 10, $keyword = null, $capec = null, string $contentType = self::contentTypes['searchCAPECApiSearchCapecGet'][0])
    {
        return $this->searchCAPECApiSearchCapecGetAsyncWithHttpInfo($page_idx, $page_size, $keyword, $capec, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCAPECApiSearchCapecGetAsyncWithHttpInfo
     *
     * Search Capec
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $capec Related CAPEC IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCAPECApiSearchCapecGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCAPECApiSearchCapecGetAsyncWithHttpInfo($page_idx = 0, $page_size = 10, $keyword = null, $capec = null, string $contentType = self::contentTypes['searchCAPECApiSearchCapecGet'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchCAPECApiSearchCapecGetRequest($page_idx, $page_size, $keyword, $capec, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCAPECApiSearchCapecGet'
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $capec Related CAPEC IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCAPECApiSearchCapecGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCAPECApiSearchCapecGetRequest($page_idx = 0, $page_size = 10, $keyword = null, $capec = null, string $contentType = self::contentTypes['searchCAPECApiSearchCapecGet'][0])
    {

        if ($page_idx !== null && $page_idx < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_idx" when calling SearchApi.searchCAPECApiSearchCapecGet, must be bigger than or equal to 0.');
        }
        
        if ($page_size !== null && $page_size > 3000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling SearchApi.searchCAPECApiSearchCapecGet, must be smaller than or equal to 3000.');
        }
        if ($page_size !== null && $page_size < 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling SearchApi.searchCAPECApiSearchCapecGet, must be bigger than or equal to 10.');
        }
        



        $resourcePath = '/api/search/capec';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_idx,
            'page-idx', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page-size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $capec,
            'capec', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCPEApiSearchCpeGet
     *
     * Search Cpe
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  int $days_back Number of days back when the CPEs were last modified (optional)
     * @param  bool $deprecated If set to true, will fetch only the deprecated CPE names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCPEApiSearchCpeGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\FastCVE\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Msn\Apis\FastCVE\Model\CpeOutput|\Msn\Apis\FastCVE\Model\HTTPValidationError
     */
    public function searchCPEApiSearchCpeGet($page_idx = 0, $page_size = 10, $keyword = null, $cpe23 = null, $last_mod_start_date = null, $last_mod_end_date = null, $days_back = null, $deprecated = false, string $contentType = self::contentTypes['searchCPEApiSearchCpeGet'][0])
    {
        list($response) = $this->searchCPEApiSearchCpeGetWithHttpInfo($page_idx, $page_size, $keyword, $cpe23, $last_mod_start_date, $last_mod_end_date, $days_back, $deprecated, $contentType);
        return $response;
    }

    /**
     * Operation searchCPEApiSearchCpeGetWithHttpInfo
     *
     * Search Cpe
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  int $days_back Number of days back when the CPEs were last modified (optional)
     * @param  bool $deprecated If set to true, will fetch only the deprecated CPE names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCPEApiSearchCpeGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\FastCVE\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Msn\Apis\FastCVE\Model\CpeOutput|\Msn\Apis\FastCVE\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCPEApiSearchCpeGetWithHttpInfo($page_idx = 0, $page_size = 10, $keyword = null, $cpe23 = null, $last_mod_start_date = null, $last_mod_end_date = null, $days_back = null, $deprecated = false, string $contentType = self::contentTypes['searchCPEApiSearchCpeGet'][0])
    {
        $request = $this->searchCPEApiSearchCpeGetRequest($page_idx, $page_size, $keyword, $cpe23, $last_mod_start_date, $last_mod_end_date, $days_back, $deprecated, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Msn\Apis\FastCVE\Model\CpeOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Msn\Apis\FastCVE\Model\CpeOutput' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Msn\Apis\FastCVE\Model\CpeOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Msn\Apis\FastCVE\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Msn\Apis\FastCVE\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Msn\Apis\FastCVE\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Msn\Apis\FastCVE\Model\CpeOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Msn\Apis\FastCVE\Model\CpeOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Msn\Apis\FastCVE\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCPEApiSearchCpeGetAsync
     *
     * Search Cpe
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  int $days_back Number of days back when the CPEs were last modified (optional)
     * @param  bool $deprecated If set to true, will fetch only the deprecated CPE names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCPEApiSearchCpeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCPEApiSearchCpeGetAsync($page_idx = 0, $page_size = 10, $keyword = null, $cpe23 = null, $last_mod_start_date = null, $last_mod_end_date = null, $days_back = null, $deprecated = false, string $contentType = self::contentTypes['searchCPEApiSearchCpeGet'][0])
    {
        return $this->searchCPEApiSearchCpeGetAsyncWithHttpInfo($page_idx, $page_size, $keyword, $cpe23, $last_mod_start_date, $last_mod_end_date, $days_back, $deprecated, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCPEApiSearchCpeGetAsyncWithHttpInfo
     *
     * Search Cpe
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  int $days_back Number of days back when the CPEs were last modified (optional)
     * @param  bool $deprecated If set to true, will fetch only the deprecated CPE names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCPEApiSearchCpeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCPEApiSearchCpeGetAsyncWithHttpInfo($page_idx = 0, $page_size = 10, $keyword = null, $cpe23 = null, $last_mod_start_date = null, $last_mod_end_date = null, $days_back = null, $deprecated = false, string $contentType = self::contentTypes['searchCPEApiSearchCpeGet'][0])
    {
        $returnType = '\Msn\Apis\FastCVE\Model\CpeOutput';
        $request = $this->searchCPEApiSearchCpeGetRequest($page_idx, $page_size, $keyword, $cpe23, $last_mod_start_date, $last_mod_end_date, $days_back, $deprecated, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCPEApiSearchCpeGet'
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  int $days_back Number of days back when the CPEs were last modified (optional)
     * @param  bool $deprecated If set to true, will fetch only the deprecated CPE names (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCPEApiSearchCpeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCPEApiSearchCpeGetRequest($page_idx = 0, $page_size = 10, $keyword = null, $cpe23 = null, $last_mod_start_date = null, $last_mod_end_date = null, $days_back = null, $deprecated = false, string $contentType = self::contentTypes['searchCPEApiSearchCpeGet'][0])
    {

        if ($page_idx !== null && $page_idx < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_idx" when calling SearchApi.searchCPEApiSearchCpeGet, must be bigger than or equal to 0.');
        }
        
        if ($page_size !== null && $page_size > 3000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling SearchApi.searchCPEApiSearchCpeGet, must be smaller than or equal to 3000.');
        }
        if ($page_size !== null && $page_size < 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling SearchApi.searchCPEApiSearchCpeGet, must be bigger than or equal to 10.');
        }
        




        if ($days_back !== null && $days_back < 0) {
            throw new \InvalidArgumentException('invalid value for "$days_back" when calling SearchApi.searchCPEApiSearchCpeGet, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/api/search/cpe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_idx,
            'page-idx', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page-size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpe23,
            'cpe23', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_mod_start_date,
            'last-mod-start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_mod_end_date,
            'last-mod-end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $days_back,
            'days-back', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deprecated,
            'deprecated', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCVEApiSearchCveGet
     *
     * Search Cve
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cve Related CVE IDs to search for (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  \DateTime $pub_start_date CVE Published start date (optional)
     * @param  \DateTime $pub_end_date CVE Published start date (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV2 $cvss_severity_v2 CVSS V2.0 Severity to search for (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV3 $cvss_severity_v3 CVSS V3.x Severity to search (optional)
     * @param  string $cvss_metrics_v2 CVSS V2.0 vector string to search for (optional)
     * @param  string $cvss_metrics_v3 CVSS V3.x vector string to search for (optional)
     * @param  bool $vulnerable CVEs found by the CPEs that are marked as vulnerable (optional, default to true)
     * @param  int $days_back Number of days back when the CVEs were last modified (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCVEApiSearchCveGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\FastCVE\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Msn\Apis\FastCVE\Model\CveOutput|\Msn\Apis\FastCVE\Model\HTTPValidationError
     */
    public function searchCVEApiSearchCveGet($page_idx = 0, $page_size = 10, $keyword = null, $cve = null, $cpe23 = null, $cwe = null, $last_mod_start_date = null, $last_mod_end_date = null, $pub_start_date = null, $pub_end_date = null, $cvss_severity_v2 = null, $cvss_severity_v3 = null, $cvss_metrics_v2 = null, $cvss_metrics_v3 = null, $vulnerable = true, $days_back = null, string $contentType = self::contentTypes['searchCVEApiSearchCveGet'][0])
    {
        list($response) = $this->searchCVEApiSearchCveGetWithHttpInfo($page_idx, $page_size, $keyword, $cve, $cpe23, $cwe, $last_mod_start_date, $last_mod_end_date, $pub_start_date, $pub_end_date, $cvss_severity_v2, $cvss_severity_v3, $cvss_metrics_v2, $cvss_metrics_v3, $vulnerable, $days_back, $contentType);
        return $response;
    }

    /**
     * Operation searchCVEApiSearchCveGetWithHttpInfo
     *
     * Search Cve
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cve Related CVE IDs to search for (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  \DateTime $pub_start_date CVE Published start date (optional)
     * @param  \DateTime $pub_end_date CVE Published start date (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV2 $cvss_severity_v2 CVSS V2.0 Severity to search for (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV3 $cvss_severity_v3 CVSS V3.x Severity to search (optional)
     * @param  string $cvss_metrics_v2 CVSS V2.0 vector string to search for (optional)
     * @param  string $cvss_metrics_v3 CVSS V3.x vector string to search for (optional)
     * @param  bool $vulnerable CVEs found by the CPEs that are marked as vulnerable (optional, default to true)
     * @param  int $days_back Number of days back when the CVEs were last modified (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCVEApiSearchCveGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\FastCVE\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Msn\Apis\FastCVE\Model\CveOutput|\Msn\Apis\FastCVE\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCVEApiSearchCveGetWithHttpInfo($page_idx = 0, $page_size = 10, $keyword = null, $cve = null, $cpe23 = null, $cwe = null, $last_mod_start_date = null, $last_mod_end_date = null, $pub_start_date = null, $pub_end_date = null, $cvss_severity_v2 = null, $cvss_severity_v3 = null, $cvss_metrics_v2 = null, $cvss_metrics_v3 = null, $vulnerable = true, $days_back = null, string $contentType = self::contentTypes['searchCVEApiSearchCveGet'][0])
    {
        $request = $this->searchCVEApiSearchCveGetRequest($page_idx, $page_size, $keyword, $cve, $cpe23, $cwe, $last_mod_start_date, $last_mod_end_date, $pub_start_date, $pub_end_date, $cvss_severity_v2, $cvss_severity_v3, $cvss_metrics_v2, $cvss_metrics_v3, $vulnerable, $days_back, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Msn\Apis\FastCVE\Model\CveOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Msn\Apis\FastCVE\Model\CveOutput' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Msn\Apis\FastCVE\Model\CveOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Msn\Apis\FastCVE\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Msn\Apis\FastCVE\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Msn\Apis\FastCVE\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Msn\Apis\FastCVE\Model\CveOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Msn\Apis\FastCVE\Model\CveOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Msn\Apis\FastCVE\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCVEApiSearchCveGetAsync
     *
     * Search Cve
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cve Related CVE IDs to search for (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  \DateTime $pub_start_date CVE Published start date (optional)
     * @param  \DateTime $pub_end_date CVE Published start date (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV2 $cvss_severity_v2 CVSS V2.0 Severity to search for (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV3 $cvss_severity_v3 CVSS V3.x Severity to search (optional)
     * @param  string $cvss_metrics_v2 CVSS V2.0 vector string to search for (optional)
     * @param  string $cvss_metrics_v3 CVSS V3.x vector string to search for (optional)
     * @param  bool $vulnerable CVEs found by the CPEs that are marked as vulnerable (optional, default to true)
     * @param  int $days_back Number of days back when the CVEs were last modified (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCVEApiSearchCveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCVEApiSearchCveGetAsync($page_idx = 0, $page_size = 10, $keyword = null, $cve = null, $cpe23 = null, $cwe = null, $last_mod_start_date = null, $last_mod_end_date = null, $pub_start_date = null, $pub_end_date = null, $cvss_severity_v2 = null, $cvss_severity_v3 = null, $cvss_metrics_v2 = null, $cvss_metrics_v3 = null, $vulnerable = true, $days_back = null, string $contentType = self::contentTypes['searchCVEApiSearchCveGet'][0])
    {
        return $this->searchCVEApiSearchCveGetAsyncWithHttpInfo($page_idx, $page_size, $keyword, $cve, $cpe23, $cwe, $last_mod_start_date, $last_mod_end_date, $pub_start_date, $pub_end_date, $cvss_severity_v2, $cvss_severity_v3, $cvss_metrics_v2, $cvss_metrics_v3, $vulnerable, $days_back, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCVEApiSearchCveGetAsyncWithHttpInfo
     *
     * Search Cve
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cve Related CVE IDs to search for (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  \DateTime $pub_start_date CVE Published start date (optional)
     * @param  \DateTime $pub_end_date CVE Published start date (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV2 $cvss_severity_v2 CVSS V2.0 Severity to search for (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV3 $cvss_severity_v3 CVSS V3.x Severity to search (optional)
     * @param  string $cvss_metrics_v2 CVSS V2.0 vector string to search for (optional)
     * @param  string $cvss_metrics_v3 CVSS V3.x vector string to search for (optional)
     * @param  bool $vulnerable CVEs found by the CPEs that are marked as vulnerable (optional, default to true)
     * @param  int $days_back Number of days back when the CVEs were last modified (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCVEApiSearchCveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCVEApiSearchCveGetAsyncWithHttpInfo($page_idx = 0, $page_size = 10, $keyword = null, $cve = null, $cpe23 = null, $cwe = null, $last_mod_start_date = null, $last_mod_end_date = null, $pub_start_date = null, $pub_end_date = null, $cvss_severity_v2 = null, $cvss_severity_v3 = null, $cvss_metrics_v2 = null, $cvss_metrics_v3 = null, $vulnerable = true, $days_back = null, string $contentType = self::contentTypes['searchCVEApiSearchCveGet'][0])
    {
        $returnType = '\Msn\Apis\FastCVE\Model\CveOutput';
        $request = $this->searchCVEApiSearchCveGetRequest($page_idx, $page_size, $keyword, $cve, $cpe23, $cwe, $last_mod_start_date, $last_mod_end_date, $pub_start_date, $pub_end_date, $cvss_severity_v2, $cvss_severity_v3, $cvss_metrics_v2, $cvss_metrics_v3, $vulnerable, $days_back, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCVEApiSearchCveGet'
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cve Related CVE IDs to search for (optional)
     * @param  string $cpe23 CPE2.3 filter specification to search for (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  \DateTime $last_mod_start_date Last modified start date (optional)
     * @param  \DateTime $last_mod_end_date Last modified end date (optional)
     * @param  \DateTime $pub_start_date CVE Published start date (optional)
     * @param  \DateTime $pub_end_date CVE Published start date (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV2 $cvss_severity_v2 CVSS V2.0 Severity to search for (optional)
     * @param  \Msn\Apis\FastCVE\Model\CveSeverityV3 $cvss_severity_v3 CVSS V3.x Severity to search (optional)
     * @param  string $cvss_metrics_v2 CVSS V2.0 vector string to search for (optional)
     * @param  string $cvss_metrics_v3 CVSS V3.x vector string to search for (optional)
     * @param  bool $vulnerable CVEs found by the CPEs that are marked as vulnerable (optional, default to true)
     * @param  int $days_back Number of days back when the CVEs were last modified (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCVEApiSearchCveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCVEApiSearchCveGetRequest($page_idx = 0, $page_size = 10, $keyword = null, $cve = null, $cpe23 = null, $cwe = null, $last_mod_start_date = null, $last_mod_end_date = null, $pub_start_date = null, $pub_end_date = null, $cvss_severity_v2 = null, $cvss_severity_v3 = null, $cvss_metrics_v2 = null, $cvss_metrics_v3 = null, $vulnerable = true, $days_back = null, string $contentType = self::contentTypes['searchCVEApiSearchCveGet'][0])
    {

        if ($page_idx !== null && $page_idx < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_idx" when calling SearchApi.searchCVEApiSearchCveGet, must be bigger than or equal to 0.');
        }
        
        if ($page_size !== null && $page_size > 3000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling SearchApi.searchCVEApiSearchCveGet, must be smaller than or equal to 3000.');
        }
        if ($page_size !== null && $page_size < 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling SearchApi.searchCVEApiSearchCveGet, must be bigger than or equal to 10.');
        }
        













        if ($days_back !== null && $days_back < 0) {
            throw new \InvalidArgumentException('invalid value for "$days_back" when calling SearchApi.searchCVEApiSearchCveGet, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/api/search/cve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_idx,
            'page-idx', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page-size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cve,
            'cve', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cpe23,
            'cpe23', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cwe,
            'cwe', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_mod_start_date,
            'last-mod-start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_mod_end_date,
            'last-mod-end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pub_start_date,
            'pub-start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pub_end_date,
            'pub-end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cvss_severity_v2,
            'cvss-severity-v2', // param base name
            'CveSeverityV2', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cvss_severity_v3,
            'cvss-severity-v3', // param base name
            'CveSeverityV3', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cvss_metrics_v2,
            'cvss-metrics-v2', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cvss_metrics_v3,
            'cvss-metrics-v3', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vulnerable,
            'vulnerable', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $days_back,
            'days-back', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCWEApiSearchCweGet
     *
     * Search Cwe
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCWEApiSearchCweGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\FastCVE\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|\Msn\Apis\FastCVE\Model\HTTPValidationError
     */
    public function searchCWEApiSearchCweGet($page_idx = 0, $page_size = 10, $keyword = null, $cwe = null, string $contentType = self::contentTypes['searchCWEApiSearchCweGet'][0])
    {
        list($response) = $this->searchCWEApiSearchCweGetWithHttpInfo($page_idx, $page_size, $keyword, $cwe, $contentType);
        return $response;
    }

    /**
     * Operation searchCWEApiSearchCweGetWithHttpInfo
     *
     * Search Cwe
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCWEApiSearchCweGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\FastCVE\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|\Msn\Apis\FastCVE\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCWEApiSearchCweGetWithHttpInfo($page_idx = 0, $page_size = 10, $keyword = null, $cwe = null, string $contentType = self::contentTypes['searchCWEApiSearchCweGet'][0])
    {
        $request = $this->searchCWEApiSearchCweGetRequest($page_idx, $page_size, $keyword, $cwe, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Msn\Apis\FastCVE\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Msn\Apis\FastCVE\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Msn\Apis\FastCVE\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Msn\Apis\FastCVE\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCWEApiSearchCweGetAsync
     *
     * Search Cwe
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCWEApiSearchCweGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCWEApiSearchCweGetAsync($page_idx = 0, $page_size = 10, $keyword = null, $cwe = null, string $contentType = self::contentTypes['searchCWEApiSearchCweGet'][0])
    {
        return $this->searchCWEApiSearchCweGetAsyncWithHttpInfo($page_idx, $page_size, $keyword, $cwe, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCWEApiSearchCweGetAsyncWithHttpInfo
     *
     * Search Cwe
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCWEApiSearchCweGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCWEApiSearchCweGetAsyncWithHttpInfo($page_idx = 0, $page_size = 10, $keyword = null, $cwe = null, string $contentType = self::contentTypes['searchCWEApiSearchCweGet'][0])
    {
        $returnType = 'mixed';
        $request = $this->searchCWEApiSearchCweGetRequest($page_idx, $page_size, $keyword, $cwe, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCWEApiSearchCweGet'
     *
     * @param  int $page_idx Results page index (optional, default to 0)
     * @param  int $page_size Results page size (optional, default to 10)
     * @param  string[] $keyword regexp to search for CPE in the description (optional)
     * @param  string[] $cwe Related CWE IDs to search for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCWEApiSearchCweGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCWEApiSearchCweGetRequest($page_idx = 0, $page_size = 10, $keyword = null, $cwe = null, string $contentType = self::contentTypes['searchCWEApiSearchCweGet'][0])
    {

        if ($page_idx !== null && $page_idx < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_idx" when calling SearchApi.searchCWEApiSearchCweGet, must be bigger than or equal to 0.');
        }
        
        if ($page_size !== null && $page_size > 3000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling SearchApi.searchCWEApiSearchCweGet, must be smaller than or equal to 3000.');
        }
        if ($page_size !== null && $page_size < 10) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling SearchApi.searchCWEApiSearchCweGet, must be bigger than or equal to 10.');
        }
        



        $resourcePath = '/api/search/cwe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_idx,
            'page-idx', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page-size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cwe,
            'cwe', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
