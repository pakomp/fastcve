<?php
/**
 * CveItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Msn\Apis\FastCVE
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastCVE
 *
 * fast, rich and API-based search for CVE and more (CPE, CWE, CAPEC)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Msn\Apis\FastCVE\Model;

use \ArrayAccess;
use \Msn\Apis\FastCVE\ObjectSerializer;

/**
 * CveItem Class Doc Comment
 *
 * @category Class
 * @package  Msn\Apis\FastCVE
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CveItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CveItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'source_identifier' => 'string',
        'vuln_status' => 'string',
        'published' => '\DateTime',
        'last_modified' => '\DateTime',
        'evaluator_comment' => 'string',
        'evaluator_solution' => 'string',
        'evaluator_impact' => 'string',
        'cisa_exploit_add' => '\DateTime',
        'cisa_action_due' => '\DateTime',
        'cisa_required_action' => 'string',
        'cisa_vulnerability_name' => 'string',
        'descriptions' => '\Msn\Apis\FastCVE\Model\LangString[]',
        'references' => '\Msn\Apis\FastCVE\Model\Reference[]',
        'metrics' => '\Msn\Apis\FastCVE\Model\Metrics',
        'weaknesses' => '\Msn\Apis\FastCVE\Model\Weakness[]',
        'configurations' => '\Msn\Apis\FastCVE\Model\Config[]',
        'vendor_comments' => '\Msn\Apis\FastCVE\Model\VendorComment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'source_identifier' => null,
        'vuln_status' => null,
        'published' => 'date-time',
        'last_modified' => 'date-time',
        'evaluator_comment' => null,
        'evaluator_solution' => null,
        'evaluator_impact' => null,
        'cisa_exploit_add' => 'date',
        'cisa_action_due' => 'date',
        'cisa_required_action' => null,
        'cisa_vulnerability_name' => null,
        'descriptions' => null,
        'references' => null,
        'metrics' => null,
        'weaknesses' => null,
        'configurations' => null,
        'vendor_comments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'source_identifier' => false,
		'vuln_status' => false,
		'published' => false,
		'last_modified' => false,
		'evaluator_comment' => false,
		'evaluator_solution' => false,
		'evaluator_impact' => false,
		'cisa_exploit_add' => false,
		'cisa_action_due' => false,
		'cisa_required_action' => false,
		'cisa_vulnerability_name' => false,
		'descriptions' => false,
		'references' => false,
		'metrics' => false,
		'weaknesses' => false,
		'configurations' => false,
		'vendor_comments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'source_identifier' => 'sourceIdentifier',
        'vuln_status' => 'vulnStatus',
        'published' => 'published',
        'last_modified' => 'lastModified',
        'evaluator_comment' => 'evaluatorComment',
        'evaluator_solution' => 'evaluatorSolution',
        'evaluator_impact' => 'evaluatorImpact',
        'cisa_exploit_add' => 'cisaExploitAdd',
        'cisa_action_due' => 'cisaActionDue',
        'cisa_required_action' => 'cisaRequiredAction',
        'cisa_vulnerability_name' => 'cisaVulnerabilityName',
        'descriptions' => 'descriptions',
        'references' => 'references',
        'metrics' => 'metrics',
        'weaknesses' => 'weaknesses',
        'configurations' => 'configurations',
        'vendor_comments' => 'vendorComments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'source_identifier' => 'setSourceIdentifier',
        'vuln_status' => 'setVulnStatus',
        'published' => 'setPublished',
        'last_modified' => 'setLastModified',
        'evaluator_comment' => 'setEvaluatorComment',
        'evaluator_solution' => 'setEvaluatorSolution',
        'evaluator_impact' => 'setEvaluatorImpact',
        'cisa_exploit_add' => 'setCisaExploitAdd',
        'cisa_action_due' => 'setCisaActionDue',
        'cisa_required_action' => 'setCisaRequiredAction',
        'cisa_vulnerability_name' => 'setCisaVulnerabilityName',
        'descriptions' => 'setDescriptions',
        'references' => 'setReferences',
        'metrics' => 'setMetrics',
        'weaknesses' => 'setWeaknesses',
        'configurations' => 'setConfigurations',
        'vendor_comments' => 'setVendorComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'source_identifier' => 'getSourceIdentifier',
        'vuln_status' => 'getVulnStatus',
        'published' => 'getPublished',
        'last_modified' => 'getLastModified',
        'evaluator_comment' => 'getEvaluatorComment',
        'evaluator_solution' => 'getEvaluatorSolution',
        'evaluator_impact' => 'getEvaluatorImpact',
        'cisa_exploit_add' => 'getCisaExploitAdd',
        'cisa_action_due' => 'getCisaActionDue',
        'cisa_required_action' => 'getCisaRequiredAction',
        'cisa_vulnerability_name' => 'getCisaVulnerabilityName',
        'descriptions' => 'getDescriptions',
        'references' => 'getReferences',
        'metrics' => 'getMetrics',
        'weaknesses' => 'getWeaknesses',
        'configurations' => 'getConfigurations',
        'vendor_comments' => 'getVendorComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('source_identifier', $data ?? [], null);
        $this->setIfExists('vuln_status', $data ?? [], null);
        $this->setIfExists('published', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('evaluator_comment', $data ?? [], null);
        $this->setIfExists('evaluator_solution', $data ?? [], null);
        $this->setIfExists('evaluator_impact', $data ?? [], null);
        $this->setIfExists('cisa_exploit_add', $data ?? [], null);
        $this->setIfExists('cisa_action_due', $data ?? [], null);
        $this->setIfExists('cisa_required_action', $data ?? [], null);
        $this->setIfExists('cisa_vulnerability_name', $data ?? [], null);
        $this->setIfExists('descriptions', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('metrics', $data ?? [], null);
        $this->setIfExists('weaknesses', $data ?? [], null);
        $this->setIfExists('configurations', $data ?? [], null);
        $this->setIfExists('vendor_comments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^CVE-[0-9]{4}-[0-9]{4,}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^CVE-[0-9]{4}-[0-9]{4,}$/.";
        }

        if ($this->container['published'] === null) {
            $invalidProperties[] = "'published' can't be null";
        }
        if ($this->container['last_modified'] === null) {
            $invalidProperties[] = "'last_modified' can't be null";
        }
        if ($this->container['descriptions'] === null) {
            $invalidProperties[] = "'descriptions' can't be null";
        }
        if ((count($this->container['descriptions']) < 1)) {
            $invalidProperties[] = "invalid value for 'descriptions', number of items must be greater than or equal to 1.";
        }

        if ($this->container['references'] === null) {
            $invalidProperties[] = "'references' can't be null";
        }
        if ((count($this->container['references']) > 500)) {
            $invalidProperties[] = "invalid value for 'references', number of items must be less than or equal to 500.";
        }

        if ((count($this->container['references']) < 0)) {
            $invalidProperties[] = "invalid value for 'references', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^CVE-[0-9]{4}-[0-9]{4,}$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling CveItem., must conform to the pattern /^CVE-[0-9]{4}-[0-9]{4,}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets source_identifier
     *
     * @return string|null
     */
    public function getSourceIdentifier()
    {
        return $this->container['source_identifier'];
    }

    /**
     * Sets source_identifier
     *
     * @param string|null $source_identifier source_identifier
     *
     * @return self
     */
    public function setSourceIdentifier($source_identifier)
    {
        if (is_null($source_identifier)) {
            throw new \InvalidArgumentException('non-nullable source_identifier cannot be null');
        }
        $this->container['source_identifier'] = $source_identifier;

        return $this;
    }

    /**
     * Gets vuln_status
     *
     * @return string|null
     */
    public function getVulnStatus()
    {
        return $this->container['vuln_status'];
    }

    /**
     * Sets vuln_status
     *
     * @param string|null $vuln_status vuln_status
     *
     * @return self
     */
    public function setVulnStatus($vuln_status)
    {
        if (is_null($vuln_status)) {
            throw new \InvalidArgumentException('non-nullable vuln_status cannot be null');
        }
        $this->container['vuln_status'] = $vuln_status;

        return $this;
    }

    /**
     * Gets published
     *
     * @return \DateTime
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param \DateTime $published published
     *
     * @return self
     */
    public function setPublished($published)
    {
        if (is_null($published)) {
            throw new \InvalidArgumentException('non-nullable published cannot be null');
        }
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last_modified
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets evaluator_comment
     *
     * @return string|null
     */
    public function getEvaluatorComment()
    {
        return $this->container['evaluator_comment'];
    }

    /**
     * Sets evaluator_comment
     *
     * @param string|null $evaluator_comment evaluator_comment
     *
     * @return self
     */
    public function setEvaluatorComment($evaluator_comment)
    {
        if (is_null($evaluator_comment)) {
            throw new \InvalidArgumentException('non-nullable evaluator_comment cannot be null');
        }
        $this->container['evaluator_comment'] = $evaluator_comment;

        return $this;
    }

    /**
     * Gets evaluator_solution
     *
     * @return string|null
     */
    public function getEvaluatorSolution()
    {
        return $this->container['evaluator_solution'];
    }

    /**
     * Sets evaluator_solution
     *
     * @param string|null $evaluator_solution evaluator_solution
     *
     * @return self
     */
    public function setEvaluatorSolution($evaluator_solution)
    {
        if (is_null($evaluator_solution)) {
            throw new \InvalidArgumentException('non-nullable evaluator_solution cannot be null');
        }
        $this->container['evaluator_solution'] = $evaluator_solution;

        return $this;
    }

    /**
     * Gets evaluator_impact
     *
     * @return string|null
     */
    public function getEvaluatorImpact()
    {
        return $this->container['evaluator_impact'];
    }

    /**
     * Sets evaluator_impact
     *
     * @param string|null $evaluator_impact evaluator_impact
     *
     * @return self
     */
    public function setEvaluatorImpact($evaluator_impact)
    {
        if (is_null($evaluator_impact)) {
            throw new \InvalidArgumentException('non-nullable evaluator_impact cannot be null');
        }
        $this->container['evaluator_impact'] = $evaluator_impact;

        return $this;
    }

    /**
     * Gets cisa_exploit_add
     *
     * @return \DateTime|null
     */
    public function getCisaExploitAdd()
    {
        return $this->container['cisa_exploit_add'];
    }

    /**
     * Sets cisa_exploit_add
     *
     * @param \DateTime|null $cisa_exploit_add cisa_exploit_add
     *
     * @return self
     */
    public function setCisaExploitAdd($cisa_exploit_add)
    {
        if (is_null($cisa_exploit_add)) {
            throw new \InvalidArgumentException('non-nullable cisa_exploit_add cannot be null');
        }
        $this->container['cisa_exploit_add'] = $cisa_exploit_add;

        return $this;
    }

    /**
     * Gets cisa_action_due
     *
     * @return \DateTime|null
     */
    public function getCisaActionDue()
    {
        return $this->container['cisa_action_due'];
    }

    /**
     * Sets cisa_action_due
     *
     * @param \DateTime|null $cisa_action_due cisa_action_due
     *
     * @return self
     */
    public function setCisaActionDue($cisa_action_due)
    {
        if (is_null($cisa_action_due)) {
            throw new \InvalidArgumentException('non-nullable cisa_action_due cannot be null');
        }
        $this->container['cisa_action_due'] = $cisa_action_due;

        return $this;
    }

    /**
     * Gets cisa_required_action
     *
     * @return string|null
     */
    public function getCisaRequiredAction()
    {
        return $this->container['cisa_required_action'];
    }

    /**
     * Sets cisa_required_action
     *
     * @param string|null $cisa_required_action cisa_required_action
     *
     * @return self
     */
    public function setCisaRequiredAction($cisa_required_action)
    {
        if (is_null($cisa_required_action)) {
            throw new \InvalidArgumentException('non-nullable cisa_required_action cannot be null');
        }
        $this->container['cisa_required_action'] = $cisa_required_action;

        return $this;
    }

    /**
     * Gets cisa_vulnerability_name
     *
     * @return string|null
     */
    public function getCisaVulnerabilityName()
    {
        return $this->container['cisa_vulnerability_name'];
    }

    /**
     * Sets cisa_vulnerability_name
     *
     * @param string|null $cisa_vulnerability_name cisa_vulnerability_name
     *
     * @return self
     */
    public function setCisaVulnerabilityName($cisa_vulnerability_name)
    {
        if (is_null($cisa_vulnerability_name)) {
            throw new \InvalidArgumentException('non-nullable cisa_vulnerability_name cannot be null');
        }
        $this->container['cisa_vulnerability_name'] = $cisa_vulnerability_name;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \Msn\Apis\FastCVE\Model\LangString[]
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param \Msn\Apis\FastCVE\Model\LangString[] $descriptions descriptions
     *
     * @return self
     */
    public function setDescriptions($descriptions)
    {
        if (is_null($descriptions)) {
            throw new \InvalidArgumentException('non-nullable descriptions cannot be null');
        }


        if ((count($descriptions) < 1)) {
            throw new \InvalidArgumentException('invalid length for $descriptions when calling CveItem., number of items must be greater than or equal to 1.');
        }
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \Msn\Apis\FastCVE\Model\Reference[]
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \Msn\Apis\FastCVE\Model\Reference[] $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }

        if ((count($references) > 500)) {
            throw new \InvalidArgumentException('invalid value for $references when calling CveItem., number of items must be less than or equal to 500.');
        }
        if ((count($references) < 0)) {
            throw new \InvalidArgumentException('invalid length for $references when calling CveItem., number of items must be greater than or equal to 0.');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return \Msn\Apis\FastCVE\Model\Metrics|null
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param \Msn\Apis\FastCVE\Model\Metrics|null $metrics metrics
     *
     * @return self
     */
    public function setMetrics($metrics)
    {
        if (is_null($metrics)) {
            throw new \InvalidArgumentException('non-nullable metrics cannot be null');
        }
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets weaknesses
     *
     * @return \Msn\Apis\FastCVE\Model\Weakness[]|null
     */
    public function getWeaknesses()
    {
        return $this->container['weaknesses'];
    }

    /**
     * Sets weaknesses
     *
     * @param \Msn\Apis\FastCVE\Model\Weakness[]|null $weaknesses weaknesses
     *
     * @return self
     */
    public function setWeaknesses($weaknesses)
    {
        if (is_null($weaknesses)) {
            throw new \InvalidArgumentException('non-nullable weaknesses cannot be null');
        }
        $this->container['weaknesses'] = $weaknesses;

        return $this;
    }

    /**
     * Gets configurations
     *
     * @return \Msn\Apis\FastCVE\Model\Config[]|null
     */
    public function getConfigurations()
    {
        return $this->container['configurations'];
    }

    /**
     * Sets configurations
     *
     * @param \Msn\Apis\FastCVE\Model\Config[]|null $configurations configurations
     *
     * @return self
     */
    public function setConfigurations($configurations)
    {
        if (is_null($configurations)) {
            throw new \InvalidArgumentException('non-nullable configurations cannot be null');
        }
        $this->container['configurations'] = $configurations;

        return $this;
    }

    /**
     * Gets vendor_comments
     *
     * @return \Msn\Apis\FastCVE\Model\VendorComment[]|null
     */
    public function getVendorComments()
    {
        return $this->container['vendor_comments'];
    }

    /**
     * Sets vendor_comments
     *
     * @param \Msn\Apis\FastCVE\Model\VendorComment[]|null $vendor_comments vendor_comments
     *
     * @return self
     */
    public function setVendorComments($vendor_comments)
    {
        if (is_null($vendor_comments)) {
            throw new \InvalidArgumentException('non-nullable vendor_comments cannot be null');
        }
        $this->container['vendor_comments'] = $vendor_comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


