<?php
/**
 * CommonModelsCvssV2CveCvssDataModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Msn\Apis\FastCVE
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastCVE
 *
 * fast, rich and API-based search for CVE and more (CPE, CWE, CAPEC)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Msn\Apis\FastCVE\Model;

use \ArrayAccess;
use \Msn\Apis\FastCVE\ObjectSerializer;

/**
 * CommonModelsCvssV2CveCvssDataModel Class Doc Comment
 *
 * @category Class
 * @package  Msn\Apis\FastCVE
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommonModelsCvssV2CveCvssDataModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'common__models__cvss_v2__CveCvssDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => '\Msn\Apis\FastCVE\Model\CommonModelsCvssV2Version',
        'vector_string' => 'string',
        'access_vector' => '\Msn\Apis\FastCVE\Model\AccessVectorType',
        'access_complexity' => '\Msn\Apis\FastCVE\Model\AccessComplexityType',
        'authentication' => '\Msn\Apis\FastCVE\Model\AuthenticationType',
        'confidentiality_impact' => '\Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType',
        'integrity_impact' => '\Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType',
        'availability_impact' => '\Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType',
        'base_score' => 'float',
        'exploitability' => '\Msn\Apis\FastCVE\Model\ExploitabilityType',
        'remediation_level' => '\Msn\Apis\FastCVE\Model\CommonModelsCvssV2RemediationLevelType',
        'report_confidence' => '\Msn\Apis\FastCVE\Model\ReportConfidenceType',
        'temporal_score' => 'float',
        'collateral_damage_potential' => '\Msn\Apis\FastCVE\Model\CollateralDamagePotentialType',
        'target_distribution' => '\Msn\Apis\FastCVE\Model\TargetDistributionType',
        'confidentiality_requirement' => '\Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType',
        'integrity_requirement' => '\Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType',
        'availability_requirement' => '\Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType',
        'environmental_score' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'vector_string' => null,
        'access_vector' => null,
        'access_complexity' => null,
        'authentication' => null,
        'confidentiality_impact' => null,
        'integrity_impact' => null,
        'availability_impact' => null,
        'base_score' => null,
        'exploitability' => null,
        'remediation_level' => null,
        'report_confidence' => null,
        'temporal_score' => null,
        'collateral_damage_potential' => null,
        'target_distribution' => null,
        'confidentiality_requirement' => null,
        'integrity_requirement' => null,
        'availability_requirement' => null,
        'environmental_score' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
		'vector_string' => false,
		'access_vector' => false,
		'access_complexity' => false,
		'authentication' => false,
		'confidentiality_impact' => false,
		'integrity_impact' => false,
		'availability_impact' => false,
		'base_score' => false,
		'exploitability' => false,
		'remediation_level' => false,
		'report_confidence' => false,
		'temporal_score' => false,
		'collateral_damage_potential' => false,
		'target_distribution' => false,
		'confidentiality_requirement' => false,
		'integrity_requirement' => false,
		'availability_requirement' => false,
		'environmental_score' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'vector_string' => 'vectorString',
        'access_vector' => 'accessVector',
        'access_complexity' => 'accessComplexity',
        'authentication' => 'authentication',
        'confidentiality_impact' => 'confidentialityImpact',
        'integrity_impact' => 'integrityImpact',
        'availability_impact' => 'availabilityImpact',
        'base_score' => 'baseScore',
        'exploitability' => 'exploitability',
        'remediation_level' => 'remediationLevel',
        'report_confidence' => 'reportConfidence',
        'temporal_score' => 'temporalScore',
        'collateral_damage_potential' => 'collateralDamagePotential',
        'target_distribution' => 'targetDistribution',
        'confidentiality_requirement' => 'confidentialityRequirement',
        'integrity_requirement' => 'integrityRequirement',
        'availability_requirement' => 'availabilityRequirement',
        'environmental_score' => 'environmentalScore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'vector_string' => 'setVectorString',
        'access_vector' => 'setAccessVector',
        'access_complexity' => 'setAccessComplexity',
        'authentication' => 'setAuthentication',
        'confidentiality_impact' => 'setConfidentialityImpact',
        'integrity_impact' => 'setIntegrityImpact',
        'availability_impact' => 'setAvailabilityImpact',
        'base_score' => 'setBaseScore',
        'exploitability' => 'setExploitability',
        'remediation_level' => 'setRemediationLevel',
        'report_confidence' => 'setReportConfidence',
        'temporal_score' => 'setTemporalScore',
        'collateral_damage_potential' => 'setCollateralDamagePotential',
        'target_distribution' => 'setTargetDistribution',
        'confidentiality_requirement' => 'setConfidentialityRequirement',
        'integrity_requirement' => 'setIntegrityRequirement',
        'availability_requirement' => 'setAvailabilityRequirement',
        'environmental_score' => 'setEnvironmentalScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'vector_string' => 'getVectorString',
        'access_vector' => 'getAccessVector',
        'access_complexity' => 'getAccessComplexity',
        'authentication' => 'getAuthentication',
        'confidentiality_impact' => 'getConfidentialityImpact',
        'integrity_impact' => 'getIntegrityImpact',
        'availability_impact' => 'getAvailabilityImpact',
        'base_score' => 'getBaseScore',
        'exploitability' => 'getExploitability',
        'remediation_level' => 'getRemediationLevel',
        'report_confidence' => 'getReportConfidence',
        'temporal_score' => 'getTemporalScore',
        'collateral_damage_potential' => 'getCollateralDamagePotential',
        'target_distribution' => 'getTargetDistribution',
        'confidentiality_requirement' => 'getConfidentialityRequirement',
        'integrity_requirement' => 'getIntegrityRequirement',
        'availability_requirement' => 'getAvailabilityRequirement',
        'environmental_score' => 'getEnvironmentalScore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('vector_string', $data ?? [], null);
        $this->setIfExists('access_vector', $data ?? [], null);
        $this->setIfExists('access_complexity', $data ?? [], null);
        $this->setIfExists('authentication', $data ?? [], null);
        $this->setIfExists('confidentiality_impact', $data ?? [], null);
        $this->setIfExists('integrity_impact', $data ?? [], null);
        $this->setIfExists('availability_impact', $data ?? [], null);
        $this->setIfExists('base_score', $data ?? [], null);
        $this->setIfExists('exploitability', $data ?? [], null);
        $this->setIfExists('remediation_level', $data ?? [], null);
        $this->setIfExists('report_confidence', $data ?? [], null);
        $this->setIfExists('temporal_score', $data ?? [], null);
        $this->setIfExists('collateral_damage_potential', $data ?? [], null);
        $this->setIfExists('target_distribution', $data ?? [], null);
        $this->setIfExists('confidentiality_requirement', $data ?? [], null);
        $this->setIfExists('integrity_requirement', $data ?? [], null);
        $this->setIfExists('availability_requirement', $data ?? [], null);
        $this->setIfExists('environmental_score', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['vector_string'] === null) {
            $invalidProperties[] = "'vector_string' can't be null";
        }
        if (!preg_match("/^((AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))\/)*(AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))$/", $this->container['vector_string'])) {
            $invalidProperties[] = "invalid value for 'vector_string', must be conform to the pattern /^((AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))\/)*(AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))$/.";
        }

        if ($this->container['base_score'] === null) {
            $invalidProperties[] = "'base_score' can't be null";
        }
        if (($this->container['base_score'] > 10.0)) {
            $invalidProperties[] = "invalid value for 'base_score', must be smaller than or equal to 10.0.";
        }

        if (($this->container['base_score'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'base_score', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['temporal_score']) && ($this->container['temporal_score'] > 10.0)) {
            $invalidProperties[] = "invalid value for 'temporal_score', must be smaller than or equal to 10.0.";
        }

        if (!is_null($this->container['temporal_score']) && ($this->container['temporal_score'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'temporal_score', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['environmental_score']) && ($this->container['environmental_score'] > 10.0)) {
            $invalidProperties[] = "invalid value for 'environmental_score', must be smaller than or equal to 10.0.";
        }

        if (!is_null($this->container['environmental_score']) && ($this->container['environmental_score'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'environmental_score', must be bigger than or equal to 0.0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return \Msn\Apis\FastCVE\Model\CommonModelsCvssV2Version
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \Msn\Apis\FastCVE\Model\CommonModelsCvssV2Version $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets vector_string
     *
     * @return string
     */
    public function getVectorString()
    {
        return $this->container['vector_string'];
    }

    /**
     * Sets vector_string
     *
     * @param string $vector_string vector_string
     *
     * @return self
     */
    public function setVectorString($vector_string)
    {
        if (is_null($vector_string)) {
            throw new \InvalidArgumentException('non-nullable vector_string cannot be null');
        }

        if ((!preg_match("/^((AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))\/)*(AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))$/", ObjectSerializer::toString($vector_string)))) {
            throw new \InvalidArgumentException("invalid value for \$vector_string when calling CommonModelsCvssV2CveCvssDataModel., must conform to the pattern /^((AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))\/)*(AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))$/.");
        }

        $this->container['vector_string'] = $vector_string;

        return $this;
    }

    /**
     * Gets access_vector
     *
     * @return \Msn\Apis\FastCVE\Model\AccessVectorType|null
     */
    public function getAccessVector()
    {
        return $this->container['access_vector'];
    }

    /**
     * Sets access_vector
     *
     * @param \Msn\Apis\FastCVE\Model\AccessVectorType|null $access_vector access_vector
     *
     * @return self
     */
    public function setAccessVector($access_vector)
    {
        if (is_null($access_vector)) {
            throw new \InvalidArgumentException('non-nullable access_vector cannot be null');
        }
        $this->container['access_vector'] = $access_vector;

        return $this;
    }

    /**
     * Gets access_complexity
     *
     * @return \Msn\Apis\FastCVE\Model\AccessComplexityType|null
     */
    public function getAccessComplexity()
    {
        return $this->container['access_complexity'];
    }

    /**
     * Sets access_complexity
     *
     * @param \Msn\Apis\FastCVE\Model\AccessComplexityType|null $access_complexity access_complexity
     *
     * @return self
     */
    public function setAccessComplexity($access_complexity)
    {
        if (is_null($access_complexity)) {
            throw new \InvalidArgumentException('non-nullable access_complexity cannot be null');
        }
        $this->container['access_complexity'] = $access_complexity;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return \Msn\Apis\FastCVE\Model\AuthenticationType|null
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param \Msn\Apis\FastCVE\Model\AuthenticationType|null $authentication authentication
     *
     * @return self
     */
    public function setAuthentication($authentication)
    {
        if (is_null($authentication)) {
            throw new \InvalidArgumentException('non-nullable authentication cannot be null');
        }
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets confidentiality_impact
     *
     * @return \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType|null
     */
    public function getConfidentialityImpact()
    {
        return $this->container['confidentiality_impact'];
    }

    /**
     * Sets confidentiality_impact
     *
     * @param \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType|null $confidentiality_impact confidentiality_impact
     *
     * @return self
     */
    public function setConfidentialityImpact($confidentiality_impact)
    {
        if (is_null($confidentiality_impact)) {
            throw new \InvalidArgumentException('non-nullable confidentiality_impact cannot be null');
        }
        $this->container['confidentiality_impact'] = $confidentiality_impact;

        return $this;
    }

    /**
     * Gets integrity_impact
     *
     * @return \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType|null
     */
    public function getIntegrityImpact()
    {
        return $this->container['integrity_impact'];
    }

    /**
     * Sets integrity_impact
     *
     * @param \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType|null $integrity_impact integrity_impact
     *
     * @return self
     */
    public function setIntegrityImpact($integrity_impact)
    {
        if (is_null($integrity_impact)) {
            throw new \InvalidArgumentException('non-nullable integrity_impact cannot be null');
        }
        $this->container['integrity_impact'] = $integrity_impact;

        return $this;
    }

    /**
     * Gets availability_impact
     *
     * @return \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType|null
     */
    public function getAvailabilityImpact()
    {
        return $this->container['availability_impact'];
    }

    /**
     * Sets availability_impact
     *
     * @param \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaType|null $availability_impact availability_impact
     *
     * @return self
     */
    public function setAvailabilityImpact($availability_impact)
    {
        if (is_null($availability_impact)) {
            throw new \InvalidArgumentException('non-nullable availability_impact cannot be null');
        }
        $this->container['availability_impact'] = $availability_impact;

        return $this;
    }

    /**
     * Gets base_score
     *
     * @return float
     */
    public function getBaseScore()
    {
        return $this->container['base_score'];
    }

    /**
     * Sets base_score
     *
     * @param float $base_score base_score
     *
     * @return self
     */
    public function setBaseScore($base_score)
    {
        if (is_null($base_score)) {
            throw new \InvalidArgumentException('non-nullable base_score cannot be null');
        }

        if (($base_score > 10.0)) {
            throw new \InvalidArgumentException('invalid value for $base_score when calling CommonModelsCvssV2CveCvssDataModel., must be smaller than or equal to 10.0.');
        }
        if (($base_score < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $base_score when calling CommonModelsCvssV2CveCvssDataModel., must be bigger than or equal to 0.0.');
        }

        $this->container['base_score'] = $base_score;

        return $this;
    }

    /**
     * Gets exploitability
     *
     * @return \Msn\Apis\FastCVE\Model\ExploitabilityType|null
     */
    public function getExploitability()
    {
        return $this->container['exploitability'];
    }

    /**
     * Sets exploitability
     *
     * @param \Msn\Apis\FastCVE\Model\ExploitabilityType|null $exploitability exploitability
     *
     * @return self
     */
    public function setExploitability($exploitability)
    {
        if (is_null($exploitability)) {
            throw new \InvalidArgumentException('non-nullable exploitability cannot be null');
        }
        $this->container['exploitability'] = $exploitability;

        return $this;
    }

    /**
     * Gets remediation_level
     *
     * @return \Msn\Apis\FastCVE\Model\CommonModelsCvssV2RemediationLevelType|null
     */
    public function getRemediationLevel()
    {
        return $this->container['remediation_level'];
    }

    /**
     * Sets remediation_level
     *
     * @param \Msn\Apis\FastCVE\Model\CommonModelsCvssV2RemediationLevelType|null $remediation_level remediation_level
     *
     * @return self
     */
    public function setRemediationLevel($remediation_level)
    {
        if (is_null($remediation_level)) {
            throw new \InvalidArgumentException('non-nullable remediation_level cannot be null');
        }
        $this->container['remediation_level'] = $remediation_level;

        return $this;
    }

    /**
     * Gets report_confidence
     *
     * @return \Msn\Apis\FastCVE\Model\ReportConfidenceType|null
     */
    public function getReportConfidence()
    {
        return $this->container['report_confidence'];
    }

    /**
     * Sets report_confidence
     *
     * @param \Msn\Apis\FastCVE\Model\ReportConfidenceType|null $report_confidence report_confidence
     *
     * @return self
     */
    public function setReportConfidence($report_confidence)
    {
        if (is_null($report_confidence)) {
            throw new \InvalidArgumentException('non-nullable report_confidence cannot be null');
        }
        $this->container['report_confidence'] = $report_confidence;

        return $this;
    }

    /**
     * Gets temporal_score
     *
     * @return float|null
     */
    public function getTemporalScore()
    {
        return $this->container['temporal_score'];
    }

    /**
     * Sets temporal_score
     *
     * @param float|null $temporal_score temporal_score
     *
     * @return self
     */
    public function setTemporalScore($temporal_score)
    {
        if (is_null($temporal_score)) {
            throw new \InvalidArgumentException('non-nullable temporal_score cannot be null');
        }

        if (($temporal_score > 10.0)) {
            throw new \InvalidArgumentException('invalid value for $temporal_score when calling CommonModelsCvssV2CveCvssDataModel., must be smaller than or equal to 10.0.');
        }
        if (($temporal_score < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $temporal_score when calling CommonModelsCvssV2CveCvssDataModel., must be bigger than or equal to 0.0.');
        }

        $this->container['temporal_score'] = $temporal_score;

        return $this;
    }

    /**
     * Gets collateral_damage_potential
     *
     * @return \Msn\Apis\FastCVE\Model\CollateralDamagePotentialType|null
     */
    public function getCollateralDamagePotential()
    {
        return $this->container['collateral_damage_potential'];
    }

    /**
     * Sets collateral_damage_potential
     *
     * @param \Msn\Apis\FastCVE\Model\CollateralDamagePotentialType|null $collateral_damage_potential collateral_damage_potential
     *
     * @return self
     */
    public function setCollateralDamagePotential($collateral_damage_potential)
    {
        if (is_null($collateral_damage_potential)) {
            throw new \InvalidArgumentException('non-nullable collateral_damage_potential cannot be null');
        }
        $this->container['collateral_damage_potential'] = $collateral_damage_potential;

        return $this;
    }

    /**
     * Gets target_distribution
     *
     * @return \Msn\Apis\FastCVE\Model\TargetDistributionType|null
     */
    public function getTargetDistribution()
    {
        return $this->container['target_distribution'];
    }

    /**
     * Sets target_distribution
     *
     * @param \Msn\Apis\FastCVE\Model\TargetDistributionType|null $target_distribution target_distribution
     *
     * @return self
     */
    public function setTargetDistribution($target_distribution)
    {
        if (is_null($target_distribution)) {
            throw new \InvalidArgumentException('non-nullable target_distribution cannot be null');
        }
        $this->container['target_distribution'] = $target_distribution;

        return $this;
    }

    /**
     * Gets confidentiality_requirement
     *
     * @return \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType|null
     */
    public function getConfidentialityRequirement()
    {
        return $this->container['confidentiality_requirement'];
    }

    /**
     * Sets confidentiality_requirement
     *
     * @param \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType|null $confidentiality_requirement confidentiality_requirement
     *
     * @return self
     */
    public function setConfidentialityRequirement($confidentiality_requirement)
    {
        if (is_null($confidentiality_requirement)) {
            throw new \InvalidArgumentException('non-nullable confidentiality_requirement cannot be null');
        }
        $this->container['confidentiality_requirement'] = $confidentiality_requirement;

        return $this;
    }

    /**
     * Gets integrity_requirement
     *
     * @return \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType|null
     */
    public function getIntegrityRequirement()
    {
        return $this->container['integrity_requirement'];
    }

    /**
     * Sets integrity_requirement
     *
     * @param \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType|null $integrity_requirement integrity_requirement
     *
     * @return self
     */
    public function setIntegrityRequirement($integrity_requirement)
    {
        if (is_null($integrity_requirement)) {
            throw new \InvalidArgumentException('non-nullable integrity_requirement cannot be null');
        }
        $this->container['integrity_requirement'] = $integrity_requirement;

        return $this;
    }

    /**
     * Gets availability_requirement
     *
     * @return \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType|null
     */
    public function getAvailabilityRequirement()
    {
        return $this->container['availability_requirement'];
    }

    /**
     * Sets availability_requirement
     *
     * @param \Msn\Apis\FastCVE\Model\CommonModelsCvssV2CiaRequirementType|null $availability_requirement availability_requirement
     *
     * @return self
     */
    public function setAvailabilityRequirement($availability_requirement)
    {
        if (is_null($availability_requirement)) {
            throw new \InvalidArgumentException('non-nullable availability_requirement cannot be null');
        }
        $this->container['availability_requirement'] = $availability_requirement;

        return $this;
    }

    /**
     * Gets environmental_score
     *
     * @return float|null
     */
    public function getEnvironmentalScore()
    {
        return $this->container['environmental_score'];
    }

    /**
     * Sets environmental_score
     *
     * @param float|null $environmental_score environmental_score
     *
     * @return self
     */
    public function setEnvironmentalScore($environmental_score)
    {
        if (is_null($environmental_score)) {
            throw new \InvalidArgumentException('non-nullable environmental_score cannot be null');
        }

        if (($environmental_score > 10.0)) {
            throw new \InvalidArgumentException('invalid value for $environmental_score when calling CommonModelsCvssV2CveCvssDataModel., must be smaller than or equal to 10.0.');
        }
        if (($environmental_score < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $environmental_score when calling CommonModelsCvssV2CveCvssDataModel., must be bigger than or equal to 0.0.');
        }

        $this->container['environmental_score'] = $environmental_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


