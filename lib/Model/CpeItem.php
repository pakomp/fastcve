<?php
/**
 * CpeItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Msn\Apis\FastCVE
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastCVE
 *
 * fast, rich and API-based search for CVE and more (CPE, CWE, CAPEC)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Msn\Apis\FastCVE\Model;

use \ArrayAccess;
use \Msn\Apis\FastCVE\ObjectSerializer;

/**
 * CpeItem Class Doc Comment
 *
 * @category Class
 * @package  Msn\Apis\FastCVE
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CpeItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CpeItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deprecated' => 'bool',
        'cpe_name' => 'string',
        'cpe_name_id' => 'string',
        'created' => '\DateTime',
        'last_modified' => '\DateTime',
        'titles' => '\Msn\Apis\FastCVE\Model\DefTitle[]',
        'refs' => '\Msn\Apis\FastCVE\Model\DefReference[]',
        'deprecated_by' => '\Msn\Apis\FastCVE\Model\DeprecatedByItem[]',
        'deprecates' => '\Msn\Apis\FastCVE\Model\Deprecate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deprecated' => null,
        'cpe_name' => null,
        'cpe_name_id' => 'uuid',
        'created' => 'date-time',
        'last_modified' => 'date-time',
        'titles' => null,
        'refs' => null,
        'deprecated_by' => null,
        'deprecates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deprecated' => false,
		'cpe_name' => false,
		'cpe_name_id' => false,
		'created' => false,
		'last_modified' => false,
		'titles' => false,
		'refs' => false,
		'deprecated_by' => false,
		'deprecates' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deprecated' => 'deprecated',
        'cpe_name' => 'cpeName',
        'cpe_name_id' => 'cpeNameId',
        'created' => 'created',
        'last_modified' => 'lastModified',
        'titles' => 'titles',
        'refs' => 'refs',
        'deprecated_by' => 'deprecatedBy',
        'deprecates' => 'deprecates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deprecated' => 'setDeprecated',
        'cpe_name' => 'setCpeName',
        'cpe_name_id' => 'setCpeNameId',
        'created' => 'setCreated',
        'last_modified' => 'setLastModified',
        'titles' => 'setTitles',
        'refs' => 'setRefs',
        'deprecated_by' => 'setDeprecatedBy',
        'deprecates' => 'setDeprecates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deprecated' => 'getDeprecated',
        'cpe_name' => 'getCpeName',
        'cpe_name_id' => 'getCpeNameId',
        'created' => 'getCreated',
        'last_modified' => 'getLastModified',
        'titles' => 'getTitles',
        'refs' => 'getRefs',
        'deprecated_by' => 'getDeprecatedBy',
        'deprecates' => 'getDeprecates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('deprecated', $data ?? [], null);
        $this->setIfExists('cpe_name', $data ?? [], null);
        $this->setIfExists('cpe_name_id', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('titles', $data ?? [], null);
        $this->setIfExists('refs', $data ?? [], null);
        $this->setIfExists('deprecated_by', $data ?? [], null);
        $this->setIfExists('deprecates', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['deprecated'] === null) {
            $invalidProperties[] = "'deprecated' can't be null";
        }
        if ($this->container['cpe_name'] === null) {
            $invalidProperties[] = "'cpe_name' can't be null";
        }
        if ($this->container['cpe_name_id'] === null) {
            $invalidProperties[] = "'cpe_name_id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['last_modified'] === null) {
            $invalidProperties[] = "'last_modified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deprecated
     *
     * @return bool
     */
    public function getDeprecated()
    {
        return $this->container['deprecated'];
    }

    /**
     * Sets deprecated
     *
     * @param bool $deprecated deprecated
     *
     * @return self
     */
    public function setDeprecated($deprecated)
    {
        if (is_null($deprecated)) {
            throw new \InvalidArgumentException('non-nullable deprecated cannot be null');
        }
        $this->container['deprecated'] = $deprecated;

        return $this;
    }

    /**
     * Gets cpe_name
     *
     * @return string
     */
    public function getCpeName()
    {
        return $this->container['cpe_name'];
    }

    /**
     * Sets cpe_name
     *
     * @param string $cpe_name cpe_name
     *
     * @return self
     */
    public function setCpeName($cpe_name)
    {
        if (is_null($cpe_name)) {
            throw new \InvalidArgumentException('non-nullable cpe_name cannot be null');
        }
        $this->container['cpe_name'] = $cpe_name;

        return $this;
    }

    /**
     * Gets cpe_name_id
     *
     * @return string
     */
    public function getCpeNameId()
    {
        return $this->container['cpe_name_id'];
    }

    /**
     * Sets cpe_name_id
     *
     * @param string $cpe_name_id cpe_name_id
     *
     * @return self
     */
    public function setCpeNameId($cpe_name_id)
    {
        if (is_null($cpe_name_id)) {
            throw new \InvalidArgumentException('non-nullable cpe_name_id cannot be null');
        }
        $this->container['cpe_name_id'] = $cpe_name_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last_modified
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets titles
     *
     * @return \Msn\Apis\FastCVE\Model\DefTitle[]|null
     */
    public function getTitles()
    {
        return $this->container['titles'];
    }

    /**
     * Sets titles
     *
     * @param \Msn\Apis\FastCVE\Model\DefTitle[]|null $titles titles
     *
     * @return self
     */
    public function setTitles($titles)
    {
        if (is_null($titles)) {
            throw new \InvalidArgumentException('non-nullable titles cannot be null');
        }
        $this->container['titles'] = $titles;

        return $this;
    }

    /**
     * Gets refs
     *
     * @return \Msn\Apis\FastCVE\Model\DefReference[]|null
     */
    public function getRefs()
    {
        return $this->container['refs'];
    }

    /**
     * Sets refs
     *
     * @param \Msn\Apis\FastCVE\Model\DefReference[]|null $refs refs
     *
     * @return self
     */
    public function setRefs($refs)
    {
        if (is_null($refs)) {
            throw new \InvalidArgumentException('non-nullable refs cannot be null');
        }
        $this->container['refs'] = $refs;

        return $this;
    }

    /**
     * Gets deprecated_by
     *
     * @return \Msn\Apis\FastCVE\Model\DeprecatedByItem[]|null
     */
    public function getDeprecatedBy()
    {
        return $this->container['deprecated_by'];
    }

    /**
     * Sets deprecated_by
     *
     * @param \Msn\Apis\FastCVE\Model\DeprecatedByItem[]|null $deprecated_by deprecated_by
     *
     * @return self
     */
    public function setDeprecatedBy($deprecated_by)
    {
        if (is_null($deprecated_by)) {
            throw new \InvalidArgumentException('non-nullable deprecated_by cannot be null');
        }
        $this->container['deprecated_by'] = $deprecated_by;

        return $this;
    }

    /**
     * Gets deprecates
     *
     * @return \Msn\Apis\FastCVE\Model\Deprecate[]|null
     */
    public function getDeprecates()
    {
        return $this->container['deprecates'];
    }

    /**
     * Sets deprecates
     *
     * @param \Msn\Apis\FastCVE\Model\Deprecate[]|null $deprecates deprecates
     *
     * @return self
     */
    public function setDeprecates($deprecates)
    {
        if (is_null($deprecates)) {
            throw new \InvalidArgumentException('non-nullable deprecates cannot be null');
        }
        $this->container['deprecates'] = $deprecates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


